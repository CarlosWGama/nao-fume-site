{"version":3,"sources":["./src/app/models/paciente.ts","./src/app/models/questionario.ts","./src/app/services/paciente.service.ts"],"names":[],"mappings":"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","file":"default~chat-chat-module~conquistas-conquistas-module~coordenador-coordenador-module~coordenador-pac~f5730fc0-es5.js","sourcesContent":["import { Questionario } from './questionario';\r\n\r\n/**\r\n * Classe com acesso ao dados do paciente\r\n */\r\nexport class Paciente {\r\n\r\n    // Lista a posição do paciente em relação aos demais\r\n    public rank = 0;\r\n\r\n    constructor(public uid?: string, public nome?: string, public codigo?: number,\r\n                public mediaCigarros: number = 0, public precoCigarro: number = 0.1,\r\n                public coordenadorUID?: string, public ultimoDiaRespondido?: string,\r\n                public avatar: number = 1,\r\n                public cigarrosEvitados: number = 0, public diasSeguidosSemFumar: number = 0,\r\n                public diasSemFumar: number = 0, public maxDiasSemFumar: number = 0,\r\n                public dinheiroAcumulado: number = 0, public dinheiroDisponivel: number = 0,\r\n                public primeiroAcesso: boolean = true,\r\n                public diasPraticoExercicio: number = 0, public excluido: boolean = false,\r\n                public questionariosDiarios: Questionario[] = []) { }\r\n\r\n    public get avatarURL(): string {\r\n        return `/assets/imgs/avatars/${this.avatar}.jpg`;\r\n    }\r\n}\r\n","/**\r\n * Questionário com os atributos das perguntas diarias\r\n */\r\nexport class Questionario {\r\n\r\n    /**\r\n     * @param dia | Dia da consulta (YYYY-MM-DD)\r\n     * @param humor | Como foi o humor do paciente 0 -> Baixo, 1 -> Médio, 2 -> Bom\r\n     * @param fumou | Se fumou naquele dia,\r\n     * @param cigarros | Quantidade de cigarros\r\n     * @param exercitou  | Se praticou exercicio\r\n     * @param vontadeFumar | Vontade de fumar 0 -> Baixa, 1 -> Normal, 2 -> Alta\r\n     */\r\n    constructor(public dia?: string,\r\n                public humor?: 0|1|2,\r\n                public fumou?: boolean,\r\n                public cigarros: number = 0,\r\n                public exercitou?: boolean,\r\n                public vontadeFumar?: 0|1|2) { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as moment from 'moment'\r\nimport * as firebase from 'firebase';\r\nimport { Paciente } from '../models/paciente';\r\nimport { Questionario } from '../models/questionario';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * Controla os dados dos questionários do paciente\r\n */\r\nexport class PacienteService {\r\n\r\n    private pacienteDB: firebase.firestore.CollectionReference;\r\n    private usuarioID:string;\r\n    private paciente:Paciente = null;\r\n\r\n\r\n    constructor() { \r\n        firebase.auth().onAuthStateChanged(user => { \r\n            if (user != null)\r\n                this.usuarioID = user.uid;\r\n        })\r\n        this.pacienteDB = firebase.firestore().collection('pacientes');\r\n    }\r\n\r\n    \r\n    //============================= BUSCAR COMO COORDENADOR =================================//\r\n    /**\r\n     * Busca todos os pacientes de um Coordenador\r\n     */\r\n    public async buscarTodos(): Promise<Paciente[]> {\r\n        console.log(this.usuarioID);\r\n        return this.pacienteDB.where('coordenadorUID', '==' ,this.usuarioID).where('excluido', '==', false).orderBy('nome').get().then(async snapshots => {\r\n            let pacientes:Paciente[] = [];\r\n            const retorno = snapshots.docs.map(async doc => {\r\n                let paciente = Object.assign(new Paciente, doc.data());\r\n                \r\n                await this.pacienteDB.doc(paciente.uid).collection('questionariosDiarios').get().then(snapshot => {\r\n                    snapshot.forEach(doc => {\r\n                        paciente.questionariosDiarios.push(Object.assign(new Questionario, doc.data()));\r\n                    })\r\n                })\r\n                return paciente;\r\n            });\r\n            await Promise.all(retorno).then(dados => { dados.forEach(p => {pacientes.push(Object.assign(new Paciente, p))}) })\r\n            console.log(pacientes);\r\n            return pacientes;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Busca o Paciente pelo seu ID unico \r\n     * @param uid \r\n     */\r\n    public async buscar(uid:string): Promise<Paciente> {\r\n        return this.pacienteDB\r\n            .where('coordenadorUID', '==' ,this.usuarioID)\r\n            .where('excluido', '==', false)\r\n            .where('uid', '==', uid)\r\n            .get().then(snapshot => {\r\n                if (snapshot.empty) return null;\r\n                return snapshot.docs[0].data() as Paciente;\r\n            })\r\n    }\r\n    //============================= BUSCAR COMO PACIENTE =================================//\r\n    /**\r\n     * Recupera os dados do Paciente logado\r\n     */\r\n    public async getPacienteLogado():Promise<Paciente> {\r\n        if (this.paciente != null && this.paciente.uid == this.usuarioID) \r\n            return this.paciente;\r\n\r\n        let doc = await this.pacienteDB.doc(this.usuarioID).get();\r\n        let dados = doc.data();\r\n       \r\n        await this.pacienteDB.where('excluido', '==', false)\r\n                       .where('coordenadorUID', '==', dados.coordenadorUID)\r\n                       .orderBy('diasSeguidosSemFumar', 'desc')\r\n                       .get().then(snapshat => {\r\n                            let rank = 0;\r\n                            snapshat.forEach(doc => {\r\n                                rank++;\r\n                                let p = doc.data();\r\n                                if (p.uid == this.usuarioID) dados['rank'] = rank;\r\n                            })\r\n                       })\r\n\r\n        this.paciente = Object.assign(new Paciente, dados);\r\n\r\n        await this.pacienteDB.doc(this.paciente.uid).collection('questionariosDiarios').get().then(snapshot => {\r\n            snapshot.forEach(doc => {\r\n                this.paciente.questionariosDiarios.push(Object.assign(new Questionario, doc.data()));\r\n            })\r\n        })\r\n\r\n        return this.paciente;\r\n    }\r\n\r\n    /**\r\n     * Atualiza os dados do paciente\r\n     * @param paciente \r\n     */\r\n    public atualizarPaciente(paciente:Paciente) {\r\n        let dados = Object.assign({}, paciente);\r\n        delete dados.questionariosDiarios;\r\n        this.pacienteDB.doc(paciente.uid).update(dados);\r\n\r\n        if (this.paciente.uid == paciente.uid)\r\n            this.paciente = paciente;\r\n    }\r\n\r\n}"],"sourceRoot":""}